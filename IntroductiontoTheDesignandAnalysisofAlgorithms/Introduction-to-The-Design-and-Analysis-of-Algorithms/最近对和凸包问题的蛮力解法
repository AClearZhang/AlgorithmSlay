import UIKit
//最近对问题
extension Double {      //定义一个平方运算
    var power:Double {return self*self}
}
func BruteForceClosestPoint(P:[(Double,Double)]) -> Double {
    var Distance = Double(1000000)
    var points = P
    let n = points.count
    for i in 0...n-2 {
        for j in i+1...n-1 {
            let xpoint = points[i]
            let ypoint = points[j]
            let temp = (xpoint.0-ypoint.0).power+(xpoint.1-ypoint.1).power
            Distance = min(Distance, temp)
        }
    }
    return sqrt(Distance)   //在最后开方是为了避免开方减少运算效率
}
let l = BruteForceClosestPoint([(1,2),(1,5),(2,3),(4,8)])

import UIKit
//蛮力法解决凸包问题 自写方法 效率不高 
//！！！待修改！！！
func BruteForceConvexHull(P:[(Int,Int)]) -> [(Int,Int)] {
    var points = P
    let n = points.count
    var answer = [(Int,Int)]()      //answer用于存储凸包所有边的对应端点，每个端点值重复一次
    var output = [(Int,Int)]()
    for i in 0...n-2 {
        for j in i+1...n-1 {
            var flag = 0
            var array = [Int]()
            let xpoint = points[i]
            let ypoint = points[j]
            var num = 0
            for k in 0...n-1 {
                if k != i && k != j{        //除去当前测试的两端点
                    let zpoint = points[k]
                    let a = ypoint.1 - xpoint.1
                    let b = xpoint.0 - ypoint.0
                    let c = xpoint.0 * ypoint.1 - xpoint.1 * ypoint.0
                    let x = zpoint.0
                    let y = zpoint.1
                    
                    let temp = a*x + b*y - c
                    array.append(temp)
                    num = array.count
                }
                
            }
            //判断所有点是否在同一侧，ax+by-c >= 0， 则flag加1
            for p in 0...num-1 {
               if array[p] >= 0{
                   flag = flag + 1
               }
            }
            //若上述判断条件均成立，flag = num，均不成立，flag = 0. 分为两侧，0<flag<num
            if flag == num || flag == 0{
                answer.append(xpoint)
                answer.append(ypoint)
            }
        }
    }
    
    //因为输出结果均为线段两端点，因此需要删除重复项
    let ans_num = answer.count
    for s in 0...ans_num-2{
        for t in s+1...ans_num-1{
            if answer[s] == answer[t]{
                output.append(answer[s])
            }
        }
    }
    
    return output
}
let l = BruteForceConvexHull([(1,3),(2,1),(2,3),(3,2),(4,0),(4,3),(5,6),(7,2)])
